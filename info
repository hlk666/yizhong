部署要做的事：
1.修改path的路径
2.修改数据库名
3.dbi的连接数据库部分用合适的用户和密码(有相应权限)




3.所有数据库操作的地方都增加返回值判断，所有输入参数都要判断。
7.开单的窗体太小，显示不开，使用不方便。


未来需要对应的功能：
1.点结束、开始、删除类型的按钮时需要提示==>是否对话框
2.监护列表里增加修改参数按钮，修改参数后以命令的形式发送给app
3.非主表信息，建立history表，完全结束或者删除后移动到history里(del_flag)
4.做个批处理，到时间了自动结束监护(防止app端不触发get_command动作，导致始终结束不了)
5.做个批处理，遍历所有cache，如果已经完全结束了，把参数插入到history表，删除cache文件。
6.开单时，提供强制结束上次监护的功能。
7.客户端设置配置文件
8.客户端自动升级功能。
9.接口部分加上权限认证
10.db操作部分加上防注入判断
11.app上传功能，增加判断数据长度的验证，防止丢失数据。
12.下诊断时，医生签名(输入)，应该改成下拉选择。 ==>这个需要客户端额C++代码修改。


<script language="javascript" src="../libraries/PCASClass.js"></script>

7导联部分单独继续保证执行
12导联的实时模式单独部署到一台服务器，用socket通信
12导联的异常模式和单次模式部署到一台服务器，用http通信
数据库单独部署到一台服务器
文件单独部署到一台服务器

让系统、软件解决问题：
有临床意义的报警
定位病人位置
让报警策略成为我们的核心竞争力
让用户界面成为我们的市场推广力
给app端增加呼救功能(SOS，手动发送数据功能)

预想的异步策略（修改、上传）
接收数据；判断合法性（必要时查询DB，利用好缓存）；返回成功（不操作DB）；放入队列异步操作。

用户分级策略：
1.频繁(每天)：缓存
2.活跃(每周)：文件
3.一般(每月)：数据库
4.睡眠(小于3个月):数据库history
5.死亡(大于3个月)：数据库history+日期后缀表


